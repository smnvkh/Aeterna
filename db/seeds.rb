# ---- –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ----
@texts = '–ö–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –ø–∞–º—è—Ç—å. –ò–Ω–æ–≥–¥–∞ —ç—Ç–æ –∑–∞–ø–∞—Ö –∫–æ—Ñ–µ, –∏–Ω–æ–≥–¥–∞ —Å–≤–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–∫–Ω–∞.
–ú—ã –≤—Å–ø–æ–º–∏–Ω–∞–µ–º –Ω–µ –¥–∞—Ç—ã, –∞ —á—É–≤—Å—Ç–≤–∞. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —É–º–µ—Ç—å —Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –±–µ—Ä–µ–∂–Ω–æ.
'.downcase.gsub(/[‚Äî.‚Äî,¬´¬ª:()]/, '').split(' ')

MEMORY_TOPICS = [
  '–î–µ—Ç—Å—Ç–≤–æ –Ω–∞ –¥–∞—á–µ',
  '–ü–µ—Ä–≤—ã–π —Å–Ω–µ–≥',
  '–£—Ç—Ä–æ –ø–µ—Ä–µ–¥ –ø–æ–µ–∑–¥–∫–æ–π',
  '–ü–∏—Å—å–º–æ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ',
  '–ù–æ—á–Ω–æ–π –≥–æ—Ä–æ–¥',
  '–ì–æ–ª–æ—Å –≤ —Ç—Ä—É–±–∫–µ',
  '–°—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º–µ',
  '–ó–∞–ø–∞—Ö —Å–∏—Ä–µ–Ω–∏',
  '–ó–≤—É–∫ –º–æ—Ä—è',
  '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —Å—Ç–æ–ª'
]

COMMENT_TEMPLATES = [
  '–û—á–µ–Ω—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ!',
  '–≠—Ç–æ –±—É–¥—Ç–æ –ø—Ä–æ –º–µ–Ω—è.',
  '–ö–∞–∫ –∂–∏–≤–æ –æ–ø–∏—Å–∞–Ω–æ.',
  '–°—Ä–∞–∑—É –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –¥–µ—Ç—Å—Ç–≤–æ.',
  '–ü—Ä–æ–Ω–∑–∏—Ç–µ–ª—å–Ω–æ –∏ –∫—Ä–∞—Å–∏–≤–æ.'
]

# ---- –ú–µ—Ç–æ–¥—ã ----

def seed
  reset_db
  users = create_users(5)
  memories = create_memories(users, 15)
  create_comments(users, memories, 2..4)
  puts "Seeding complete!"
end

def reset_db
  Comment.destroy_all
  Memory.destroy_all
  User.destroy_all
  puts "üßπ Database cleaned"
end

def random_sentence
  Array.new(rand(8..14)) { @texts.sample }.join(' ').capitalize + '.'
end

def create_users(quantity)
  puts "–°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
  quantity.times.map do |i|
    User.create!(
      email: "user#{i+1}@example.com",
      password: "123456"
    )
  end
end

def create_memories(users, quantity)
  puts "–°–æ–∑–¥–∞—ë–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è..."
  quantity.times.map do
    Memory.create!(
      user: users.sample,
      title: MEMORY_TOPICS.sample,
      body: random_sentence
    )
  end
end

def create_comments(users, memories, quantity_range)
  puts "–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏..."
  memories.each do |memory|
    rand(quantity_range).times do
      available_users = users.reject { |u| u.id == memory.user_id }
      Comment.create!(
        memory: memory,
        user: available_users.sample,
        body: COMMENT_TEMPLATES.sample
      )
    end
  end
end

# ---- –ó–∞–ø—É—Å–∫ ----
seed
